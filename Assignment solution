solution:1
from functools import reduce

def factorial_reduce(n):
    return reduce(lambda x, y: x * y, range(1, n + 1), 1)

print(factorial_reduce(n))   

solution:2
def sieve_of_eratosthenes(limit):
    sieve = [True] * (limit + 1)
    sieve[0] = sieve[1] = False
    for i in range(2, int(math.sqrt(limit)) + 1):
        if sieve[i]:
            for j in range(i * i, limit + 1, i):
                sieve[j] = False
    return sieve

def is_prime_sieve(n):
    if n <= 1:
        return False
    limit = n
    sieve = sieve_of_eratosthenes(limit)
    return sieve[n]

print(is_prime_sieve(n))    

solution:3
def fibonacci_iterative_max(max_value):
    sequence = []
    a, b = 0, 1
    while a <= max_value:
        sequence.append(a)
        a, b = b, a + b
    return sequence

max_value = 50
print(fibonacci_iterative_max(max_value))  # [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

solution:4
def reverse_string_recursive(s):
    if len(s) == 0:
        return s
    else:
        return reverse_string_recursive(s[1:]) + s[0]
print(reverse_string_recursive(s))

solution:5
def is_palindrome_recursive(s):
    # Remove non-alphanumeric characters and convert to lowercase
    s = ''.join(char.lower() for char in s if char.isalnum())
    if len(s) <= 1:
        return True
    if s[0] != s[-1]:
        return False
    return is_palindrome_recursive(s[1:-1])

print(is_palindrome_recursive(s)) 

solution:6
def pattern_string_multiplication(n):
    for i in range(1, n + 1):
        print('* ' * i)  # Multiply string '*' by i

pattern_string_multiplication(n)

solution:7
def triangle_pattern_list_comprehension(n):
    for i in range(1, n + 1):
        # Print leading spaces and numbers using list comprehension
        print(' ' * (n - i) + ' '.join([str(x) for x in range(1, 2 * i)]))
print("\nUsing list comprehension:")
triangle_pattern_list_comprehension(n)

solution:8
def alphabet_pattern_list_comprehension(n):
    for i in range(1, n + 1):
        # Print leading spaces
        row = ' ' * (n - i)
        
        # Generate the alphabet sequence (forward and backward)
        forward = [chr(64 + j) for j in range(1, i + 1)]
        backward = [chr(64 + j) for j in range(i - 1, 0, -1)]
        
        # Combine both parts
        print(row + ' '.join(forward + backward))
print("\nUsing list comprehension:")
alphabet_pattern_list_comprehension(n)
